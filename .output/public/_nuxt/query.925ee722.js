import{E as w,G as y,H as c}from"./entry.3171d619.js";import{h as f,j as m,u as l}from"./json.d3f53d30.js";import{w as g}from"./utils.a28adc5d.js";const o=t=>Array.isArray(t)?t:t?[t]:[],d=["sort","where","only","without"],p=(t,s)=>{const e={...s};for(const r of d)e[r]&&(e[r]=o(e[r]));const n=(r,a=h=>h)=>(...h)=>(e[r]=a(...h),i),i={params:()=>Object.freeze(e),only:n("only",o),without:n("without",o),where:n("where",r=>[...o(e.where),r]),sort:n("sort",r=>[...o(e.sort),...o(r)]),limit:n("limit",r=>parseInt(String(r),10)),skip:n("skip",r=>parseInt(String(r),10)),findOne:()=>t({...e,first:!0}),find:()=>t(e),findSurround:(r,a)=>t({...e,surround:{query:r,...a}}),locale:r=>i.where({_locale:r})};return i},u=t=>{const s=g(`/query/${f(t)}`);return $fetch(s,{method:"GET",responseType:"json",params:{_params:m(t),previewToken:l("previewToken").value}})};function j(t,...s){if(typeof t=="string"){let e=w(y(c(t,...s)));return e=e.replace(/[-[\]{}()*+.,^$\s]/g,"\\$&"),p(u).where({_path:new RegExp(`^${e}`)})}return p(u,t)}export{j as q};
