import{x as C,y as d,z as O,A as x,B as A,u as B,C as k}from"./entry.3171d619.js";const z=()=>null;function E(...r){var h,v,m,_,D,g,b,w;const l=typeof r[r.length-1]=="string"?r.pop():void 0;typeof r[0]!="string"&&r.unshift(l);let[n,u,e={}]=r;if(typeof n!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof u!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=(h=e.server)!=null?h:!0,e.default=(v=e.default)!=null?v:z,e.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),e.lazy=(_=(m=e.lazy)!=null?m:e.defer)!=null?_:!1,e.initialCache=(D=e.initialCache)!=null?D:!0;const a=C(),c=()=>(a.isHydrating||e.initialCache)&&a.payload.data[n]!==void 0;a._asyncData[n]||(a._asyncData[n]={data:d(c()?a.payload.data[n]:(b=(g=e.default)==null?void 0:g.call(e))!=null?b:null),pending:d(!c()),error:d((w=a.payload._errors[n])!=null?w:null)});const t={...a._asyncData[n]};t.refresh=(i={})=>a._asyncDataPromises[n]?a._asyncDataPromises[n]:i._initial&&c()?a.payload.data[n]:(t.pending.value=!0,a._asyncDataPromises[n]=new Promise((o,s)=>{try{o(u(a))}catch(f){s(f)}}).then(o=>{e.transform&&(o=e.transform(o)),e.pick&&(o=M(o,e.pick)),t.data.value=o,t.error.value=null}).catch(o=>{var s,f;t.error.value=o,t.data.value=B((f=(s=e.default)==null?void 0:s.call(e))!=null?f:null)}).finally(()=>{t.pending.value=!1,a.payload.data[n]=t.data.value,t.error.value&&(a.payload._errors[n]=!0),delete a._asyncDataPromises[n]}),a._asyncDataPromises[n]);const y=()=>t.refresh({_initial:!0}),P=e.server!==!1&&a.payload.serverRendered;{const i=k();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const s=i._nuxtOnBeforeMountCbs;i&&(O(()=>{s.forEach(f=>{f()}),s.splice(0,s.length)}),x(()=>s.splice(0,s.length)))}P&&a.isHydrating&&n in a.payload.data?t.pending.value=!1:i&&(a.payload.serverRendered&&a.isHydrating||e.lazy)?i._nuxtOnBeforeMountCbs.push(y):y(),e.watch&&A(e.watch,()=>t.refresh());const o=a.hook("app:data:refresh",s=>{if(!s||s.includes(n))return t.refresh()});i&&x(o)}const p=Promise.resolve(a._asyncDataPromises[n]).then(()=>t);return Object.assign(p,t),p}function R(r){const l=r?Array.isArray(r)?r:[r]:void 0;return C().callHook("app:data:refresh",l)}function M(r,l){const n={};for(const u of l)n[u]=r[u];return n}export{R as r,E as u};
